# -*- coding: utf-8 -*-
"""Assignment 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hcrAKpqbSCAVkGSrX27MoKRXxHHaIF2s
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, davies_bouldin_score

# Load the dataset
file_path = "/content/sample_data/housing.csv"
df = pd.read_csv(file_path)

# Selecting features for clustering (excluding target 'MedHouseVal')
X = df.drop(columns=["MedHouseVal"])

# Standardizing the features for better clustering performance
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Define the number of clusters
k = 3  # You can experiment with different values of k

# Apply KMeans clustering
kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
kmeans.fit(X_scaled)

# Get cluster labels
labels = kmeans.labels_

# Compute clustering performance metrics
inertia = kmeans.inertia_  # Sum of squared distances to the nearest cluster center
silhouette = silhouette_score(X_scaled, labels)  # Silhouette score (higher is better)
davies_bouldin = davies_bouldin_score(X_scaled, labels)  # Davies-Bouldin index (lower is better)

# Print the results
print(f"Number of clusters: {k}")
print(f"Inertia (SSE): {inertia:.4f}")
print(f"Silhouette Score: {silhouette:.4f}")
print(f"Davies-Bouldin Index: {davies_bouldin:.4f}")

# Optional: Print cluster centers
print("Cluster Centers:")
print(scaler.inverse_transform(kmeans.cluster_centers_))